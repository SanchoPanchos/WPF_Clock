Ніколенко Ірина, Закревський Олександр. Clock.
Результати тестування лаби 1.
Інтерфейс.
Перше вікно - логін. Якщо не ввести пароль чи логін, не можна зайти. Але пароль і логін можуть бути навіть з одного символу. 
Можливо, варто було б додати обмеження, щоб пароль був не менше 6 символів. 
Наступне вікно - головне вікно програми. Три кнопки - додати: видалити та Logout. Можна додати необмежену кількість поясів.  Видалення та додавання працюють коректно. Якщо натиснути кнопку Logout, відкиється вікно логін.
Вікно реєстрації. Якщо не заповнити поля, можна натиснути кнопку Register і вона спрацює. Відсутня валідація в полях ім'я, прізвище, мейл, нікнейм. Пароль може бути навіть з 1 символу. 
Після заповнення всіх даних(або не всіх), натиснувши на кнопку Register відкривається головне вікно програми. Якщо знову разлогінитись і зайти на сторінку  Register, всі дані, що були введені до цього, відображаються знов.
Щодо коду. Можливо варто було б зробити клас(модель) для самого часового поясу.
Тестування лаби 2.
Система логування реалізована. Логи записуються в файл  Log по шляху C:\Users\ira\AppData\Roaming\Clock\Logs. Для цього запису був реалізований клас LogManager, в якому реалізована функція Log, яка приймає параметр типу string - текст логу. 
Функціонал автологіну реалізований за рахунок серіалізації об'єкту класу User - поточного юзера. Дані в форматі json записуються в файл Data.txt по шляху C:\Users\ira\AppData\Roaming\Clock\Data. 
Серіалізація виконується за функції Serialize(obj) класу JavaScriptSerializer, десеріалізація - Deserialize<Type>(jsonData). На даний момент серіалізація відбувається тільки після реєстрації нового користувача, тому, коли я логінилась, натискала логаут, 
і на моменті видалення файлу з даними про користувача(Data.txt) в мене вилітала помилка, оскільки такого файлу не було створено. Тому може варто було б додати перевірку на існування файлу. Логаут без закриття станції по суті був реалізований відразу. 
В программі є одне вікно, на якому в залежності від того, що ми хочемо зробити/куди натиснули відображаються деякі елементи. Тобто, коли ми натискаємо логаут, змінюється розмір вікна, хайдяться елементи головного вікна(з часовими поясами) і показуються елементи екрани логіну.
Тестування лаби 3.
Функціонал в окремий потік як би перенесений, але не повністю, тільки додавання нового об'єкту. Створюємо новий потік Thread myThread = new Thread(SetTime); кажемо яку функцію цому виконувати. 
Запускаємо виконання потоку myThread.Start(myTextBlock); і передаємо параметр в потік. Якщо додати два пояси, потім спробувати змінити час одного з них, вилітає помилка, з тексту якої ясно, 
що необхідно реалізувати інтерфейс класу IComparable, а саме для виконання функції сортування необхідно, щоб об'єкт, який ми хочемо порівняти мав визначення функції CompareTo(object obj).  
Тестування лаби 4.
Збереження даних в БД за допомогою Entity Framework реалізовано.
Тепер логін відбається через БД, тобто якщо такого користувача раніше не було створено, залогінитись не можна. Відповідно під час реєстрації новий
користувач додається в БД. Усі годинники додаються в БД. Взаємодія з БД відбувається по суті через клас Entity Wrapper, який в свою чергу працює
з даними з класу MyContext, що наслідується від класу DBContext. До конжного класу моделі, що зберігається в БД(User, TimeClock), було додано функцію .*Configuration(), яка викликається під час 
створення моделі БД в класі MyContext. Ці функції відповідають за налаштування моделей цих сутностей в MyContext.
